initialise
    // need to assign: gameSetting.level = 1 and gameSetting.totalGameCards = 6
    // createCards()
    // set gameState.cardsLeft = gameSetting.totalGameCards
    // render? -
        // update play-button from "Start Game" to "Replay!";
        // gameStatus = "your time starts now!"
        // clear gameArea, timer, selection-display
        // display new set of cards and timer

createCards
    // set cardsToCreate = gameSetting.totalGameCards / 2
    // Loop x no. of cardsToCreate times:
        // randomly choose one combi from cardCombi
            // var cardA = new card(cardCombi[0], "active", "playerNotSel");
            // var cardB = new card(cardCombi[1], "active", "playerNotSel");
            // cardArray.push(cardA, cardB);

handleMove (rmb to write codes to update Model, NOT DOM!!!!)
// set clickedCard = evt.target...
// to check card.selection of clicked card (evt.target)
    // if "playerSel", update to "playerNotSel" (make sure renderView also updates accordingly, ie, selectionDisplay.textContent = "? + ? = 10 " )
    // if "playerNotSel", update to "playerSel"
        // if gameState.firstCardSel = NULL, set clickedCard = gameState.firstCardSel and return; (make sure correspondingly in renderView, selectionDisplay.textContent with "clickedCard value + ? = 10 ")
        // if gameState.firstCardSel != NULL, checkSum, checkWin
// render()

checkSum, ie,
// if sum of cards add up to 10,
    // update for both selected cards: card.status = 'inactive' and card.selection = "playerNotSel"
    // cardArray.pop the two cards (renderMessage to prompt "bingo!" and renderView to remove display of selected cards) 
    // gameState.firstCardSel = NULL
    // gameState.cardsLeft should be updated by association of cardArray.length? -> to confirm
// else, for both cards: card.status = 'active' and card.selection = "playerNotSel" (renderMessage to prompt "let's try again!" and renderView to
// unselect cards)

checkWin, ie, time and no. of cards left
// - if gameState.timeleft = 0, check
    //  - if gameState.cardsLeft =0, call updateGame function (renderMessage "Good Job! On to the next challenge now!") 
    //  - if gameState.cardsLeft > 0, call resetGame function (renderMessage "Aw, time's up! Shall we try again?") 
// - if gameState.timeleft > 0, check
    // - if gameState.cardsLeft =0, refreshGame (renderMessage "Good Job! On to the next challenge now!")
    // - if gameState.cardsLeft > 0, continue

// updateGame, refresh game for next level 

// for routine game play
// function renderCards(selCard) {
//     const selectedCard = document.getElementById(selCard.target.id);
//     if (selCard.target.getCardSel() = "playerSel") {


    // (make sure renderView also updates accordingly, ie, selectionDisplay.textContent = "? + ? = 10 " )
    // if "playerNotSel", update to "playerSel"
        // if gameState.firstCardSel = NULL, set clickedCard = gameState.firstCardSel and return; (make sure correspondingly in renderView, selectionDisplay.textContent with "clickedCard value + ? = 10 ")
        // if gameState.firstCardSel != NULL, checkSum, checkWin
// render()