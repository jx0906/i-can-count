1. **Analyze the app's functionality**: The app's features, from the user's point of view, should be described using _User Stories_.

As a user,
- I want to be able to apply arithmetic to play the game (ie, be able to mark out X and O on a 9-grid box).
- I would like feedback on my choices, ie, when I win and make a mistake.
- I want to be able to track my progress in the game (ie, amount of time left, which level)

2. **Think about the overall design (look & feel) of the app**

- game is targeted for children below 5 yo, so bright colours and images would be preferred
- but considering that this is a project, i will prioritise the business logic.
- will go for minimalist design, get the game working

3. **Wireframe the UI** - no need

    Wireframes provide a blueprint for the HTML & CSS. Wireframes also help reveal an application's state (data) and functionality.

4. **Pseudocode** - see pseudocode.txt

   Pseudocode outlines the app's logic using plain language. It provides a road map to writing the code itself. For example,
   pseudocoding the logic for when a player makes a move, checking if the game has been won, etc., will prove to be helpful when
   writing the actual code.

5. **Identify the application's state (data)**

    What does the application need to "remember" throughout its execution?
    Use the wireframe and pseudocode to help identify what state needs to be tracked.

6. **Set up the project** - done

7. **Create a local repo** - done

8. **Organize the app's JS into sections** - done

9. **Code away!**

10. **Make frequent git commits**


## Game idea: Card game for kids (up to 3 levels)

things i will need to code:
- let player choose choice of play (arithmetric to 10)
    > lvl 1: 6 cards;
    > lvl 2: 10 cards;
    > lvl 3: 20 cards;
- initialisation function
    > arithmetric: 3/5/10 sets of card which add to 10 - cards are opened by default
- countdown timer (for next level): 1 min
- feedback for when cards are chosen, eg, choose 5, then the card is marked "active" or it appears somewhere like 5 + ? = 10
- matching logic (ie, when the cards add to 10); feedback - confetti when matched; try again when wrong
- gameWin logic (ie, check for "match" amongst all cards)
    > proceed to level 2 if clear level 1 within time. add timerBal points for proceeding to next level. 
    > if not, game to exit with motivational message

/if time permits:
- let users decide what is that number they want for the summation; or maybe multiplication? 
- have animation to show dinosaur catching up with the prey (as a proxy for timer)
- keeping a scoreboard of players' history

info I need to "preload" into the code:
- scope for the numbers (to 100?)
- motivational messages depending on score 

data i need to store:
- aft initialisation, what the randomly generated cards are
- status of cards, ie, which are matched (covered or disposed for chosen cards)
- player score: 10 points for every match, 10 points for clearing within time. 